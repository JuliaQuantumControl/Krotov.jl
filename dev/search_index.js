var documenterSearchIndex = {"docs":
[{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"EditURL = \"https://github.com/QuantumControl-jl/Krotov.jl/blob/master/examples/rho_3states.jl\"","category":"page"},{"location":"examples/rho_3states/#Example-3:-Optimization-of-a-Dissipative-Quantum-Gate","page":"Example 3 (Diss. Gate)","title":"Example 3: Optimization of a Dissipative Quantum Gate","text":"","category":"section"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"tip: Tip\nThis example is also available as a Jupyter notebook: rho_3states.ipynb.Compare this example against the same example using the krotov Python package.","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"gdefop1hat1 gdefinittextinit gdeftgttexttgt","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"This example illustrates the optimization for a quantum gate in an open quantum system, where the dynamics is governed by the Liouville-von Neumann equation.","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"using QuantumPropagators\nusing QuantumControlBase\nusing Krotov\nusing LinearAlgebra\nusing SparseArrays","category":"page"},{"location":"examples/rho_3states/#The-two-transmon-system","page":"Example 3 (Diss. Gate)","title":"The two-transmon system","text":"","category":"section"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"We will use internal units GHz and ns. Values in GHz contain an implicit factor 2 pi, and MHz and μs are converted to GHz and ns, respectively:","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"const GHz = 2π;\nconst MHz = 0.001GHz;\nconst ns = 1.0;\nconst μs = 1000ns;\nconst 𝕚 = 1im;\nnothing #hide","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"This implicit factor 2 pi is because frequencies (nu) convert to energies as E = h nu, but our propagation routines assume a unit hbar = 1 for energies. Thus, the factor h  hbar = 2 pi.","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"function transmon_liouvillian(Ωre, Ωim;\n        N=5,             # number of qubit levels\n        ω₁=4.3796GHz,    # qubit frequency 1\n        ω₂=4.6137GHz,    # qubit frequency 2\n        ωd=4.4985GHz,    # drive frequency\n        δ₁=-239.3MHz,    # anharmonicity 1\n        δ₂=-242.8MHz,    # anharmonicity 2\n        J=-2.3MHz,       # effective qubit-qubit coupling\n        γ₁₁=(1/38.0μs),  # decay rate for qubit 1\n        γ₁₂=(1/32.0μs),  # decay rate for qubit 2\n        γ₂₁=(1/29.5μs),  # dephasing rate for qubit 1\n        γ₂₂=(1/16.0μs),  # dephasing time for qubit 2\n    )\n\n    ⊗(A, B) = kron(A, B)\n    𝟙 = SparseMatrixCSC{ComplexF64, Int64}(sparse(I, N, N))\n\n    b̂₁ = spdiagm(1 => complex.(sqrt.(collect(1:N-1)))) ⊗ 𝟙\n    b̂₂ = 𝟙 ⊗ spdiagm(1 => complex.(sqrt.(collect(1:N-1))))\n    b̂₁⁺ = sparse(b̂₁'); b̂₂⁺ = sparse(b̂₂')\n    n̂₁ = sparse(b̂₁' * b̂₁); n̂₂ = sparse(b̂₂' * b̂₂)\n    n̂₁² = sparse(n̂₁ * n̂₁); n̂₂² = sparse(n̂₂ * n̂₂)\n    b̂₁⁺_b̂₂ = sparse(b̂₁' * b̂₂); b̂₁_b̂₂⁺ = sparse(b̂₁ * b̂₂')\n\n    Ĥ₀ = sparse(\n        (ω₁ - ωd - δ₁/2) * n̂₁ + (δ₁/2) * n̂₁²\n        + (ω₂ - ωd - δ₂/2) * n̂₂ + (δ₂/2) * n̂₂²\n        + J * (b̂₁⁺_b̂₂ + b̂₁_b̂₂⁺)\n    )\n\n    Ĥ₁re = (1/2) * (b̂₁ + b̂₁⁺ + b̂₂ + b̂₂⁺)\n    Ĥ₁im = (𝕚/2) * (b̂₁⁺ - b̂₁ + b̂₂⁺ - b̂₂)\n\n    H = (Ĥ₀, (Ĥ₁re, Ωre), (Ĥ₁im, Ωim))\n\n    c_ops = [√γ₁₁ * b̂₁, √γ₁₂ * b̂₂, √γ₂₁ * n̂₁, √γ₂₂ * n̂₂]\n\n    return liouvillian(H, c_ops; convention=:TDSE)\n\nend\n\nconst T = 400ns;\n\nΩre = t -> 35MHz * flattop(t; T=T, t_rise=20ns);\nΩim = t -> 0.0;\n\nL = transmon_liouvillian(Ωre, Ωim);\n\ntlist = collect(range(0, 400ns, length=2000));\nnothing #hide","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"The guess pulse looks as follows:","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"using PyPlot\nmatplotlib.use(\"Agg\")\n\nfunction plot_control(pulse::Vector, tlist)\n    fig, ax = matplotlib.pyplot.subplots(figsize=(6, 3))\n    ax.plot(tlist, pulse)\n    ax.set_xlabel(\"time\")\n    ax.set_ylabel(\"amplitude\")\n    return fig\nend\n\nplot_control(ϵ::T, tlist) where T<:Function =\n    plot_control([ϵ(t) for t in tlist], tlist)\n\nplot_control(Ωre, tlist)","category":"page"},{"location":"examples/rho_3states/#Optimization-objectives","page":"Example 3 (Diss. Gate)","title":"Optimization objectives","text":"","category":"section"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"Our target gate is OpO = sqrttextiSWAP:","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"SQRTISWAP = [1  0    0   0;\n             0 1/√2 𝕚/√2 0;\n             0 𝕚/√2 1/√2 0;\n             0  0    0   1];\nnothing #hide","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"The key idea explored in the paper is that a set of three density matrices is sufficient to track the optimization","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"$","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"\\begin{align} \\Op{\\rho}1     &= \\sum{i=1}^{d} \\frac{2 (d-i+1)}{d (d+1)} \\ketbra{i}{i} \\\n\\Op{\\rho}2     &= \\sum{i,j=1}^{d} \\frac{1}{d} \\ketbra{i}{j} \\\n\\Op{\\rho}3     &= \\sum{i=1}^{d} \\frac{1}{d} \\ketbra{i}{i} \\end{align} $","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"In our case, d=4 for a two qubit-gate, and the keti, ketj are the canonical basis states ket00, ket01, ket10, ket11","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"function ket(i::Int64; N=5)\n    Ψ = zeros(ComplexF64, N)\n    Ψ[i+1] = 1\n    return Ψ\nend;\n\nket(i::Int64, j::Int64; N=5) = kron(ket(i; N=N), ket(j; N=N));\n\nbra(args...; N=5) = adjoint(ket(args..., N=N));\n\nconst basis_labels = [(0, 0), (0, 1), (1, 0), (1, 1)];\nconst basis = [ket(labels...) for labels in basis_labels];\nconst d = length(basis);\n\nconst basis_tgt = [sum([SQRTISWAP[i,j] * basis[i] for i ∈ 1:d]) for j ∈ 1:d];\n\n\nconst ρ̂₁ = sum([(2*(d-i+1)/(d*(d+1))) * basis[i] * adjoint(basis[i]) for i ∈ 1:d]);\nconst ρ̂₂ = sum([(1/d) * basis[i] * adjoint(basis[j]) for i ∈ 1:d for j ∈ 1:d]);\nconst ρ̂₃ = sum([(1/d) * basis[i] * adjoint(basis[i]) for i ∈ 1:d]);\n\nconst ρ̂₁_tgt = sum([(2*(d-i+1)/(d*(d+1))) * basis_tgt[i] * adjoint(basis_tgt[i]) for i ∈ 1:d]);\nconst ρ̂₂_tgt = sum([(1/d) * basis_tgt[i] * adjoint(basis_tgt[j]) for i ∈ 1:d for j ∈ 1:d]);\nconst ρ̂₃_tgt = sum([(1/d) * basis_tgt[i] * adjoint(basis_tgt[i]) for i ∈ 1:d]);\nnothing #hide","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"The three density matrices play different roles in the optimization, and, as shown in the paper, convergence may improve significantly by weighing the states relatively to each other. For this example, we place a strong emphasis on the optimization Oprho_1 rightarrow OpO^dagger Oprho_1 OpO, by a factor of 20. This reflects that the hardest part of the optimization is identifying the basis in which the gate is diagonal. We will be using the real-part functional (J_Ttextre) to evaluate the success of Oprho_i rightarrow OpOOprho_iOpO^dagger. Because Oprho_1 and Oprho_3 are mixed states, the Hilbert-Schmidt overlap will take values smaller than one in the optimal case. To compensate, we divide the weights by the purity of the respective states.","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"weights = Float64[20, 1, 1];\nweights *= length(weights) / sum(weights); # manual normalization\nweights ./= [0.3, 1.0, 0.25]; # purities\n\nconst objectives = [\n    WeightedObjective(\n        initial_state=reshape(ρ̂₁,:),\n        generator=L,\n        target_state=reshape(ρ̂₁_tgt,:),\n        weight=weights[1]\n    ),\n    WeightedObjective(\n        initial_state=reshape(ρ̂₂,:),\n        generator=L,\n        target_state=reshape(ρ̂₂_tgt,:),\n        weight=weights[2]\n    ),\n    WeightedObjective(\n        initial_state=reshape(ρ̂₃,:),\n        generator=L,\n        target_state=reshape(ρ̂₃_tgt,:),\n        weight=weights[3]\n    )\n];\nnothing #hide","category":"page"},{"location":"examples/rho_3states/#Dynamics-under-the-Guess-Pulse","page":"Example 3 (Diss. Gate)","title":"Dynamics under the Guess Pulse","text":"","category":"section"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"ρ̂₀₀ = ket(0, 0) * adjoint(ket(0, 0));\nρ̂₀₁ = ket(0, 1) * adjoint(ket(0, 1));\nρ̂₁₀ = ket(1, 0) * adjoint(ket(1, 0));\nρ̂₁₁ = ket(1, 1) * adjoint(ket(1, 1));\n\nfunction as_matrix(ρ⃗)\n    N = isqrt(length(ρ⃗))\n    return reshape(ρ⃗, N, N)\nend;\n\npop00 = ρ⃗ -> real(tr(as_matrix(ρ⃗) * ρ̂₀₀));\npop01 = ρ⃗ -> real(tr(as_matrix(ρ⃗) * ρ̂₀₁));\npop10 = ρ⃗ -> real(tr(as_matrix(ρ⃗) * ρ̂₁₀));\npop11 = ρ⃗ -> real(tr(as_matrix(ρ⃗) * ρ̂₁₁));\n\n\nrho_00_expvals = propagate(\n    reshape(ρ̂₀₀, :), obj_genfunc(objectives[1], tlist), tlist; method=:newton,\n    observables=(pop00, pop01, pop10, pop11), storage=true\n);\nnothing #hide","category":"page"},{"location":"examples/rho_3states/#Optimization","page":"Example 3 (Diss. Gate)","title":"Optimization","text":"","category":"section"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"const problem = ControlProblem(\n    objectives=objectives,\n    prop_method=:newton,\n    pulse_options=IdDict(\n        Ωre  => Dict(\n            :lambda_a => 1.0,\n            :update_shape => t -> flattop(t, T=T, t_rise=20ns, func=:blackman),\n        ),\n        Ωim  => Dict(\n            :lambda_a => 1.0,\n            :update_shape => t -> flattop(t, T=T, t_rise=20ns, func=:blackman),\n        ),\n    ),\n    tlist=tlist,\n    iter_stop=3,\n    chi=chi_re!,\n    J_T=J_T_re,\n    check_convergence= res -> begin (\n            (res.J_T < 1e-3)\n            && (res.converged = true)\n            && (res.message=\"J_T < 10⁻³\")\n        ) end\n);\n\n\nopt_result = optimize_pulses(problem);\nnothing #hide","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"opt_result","category":"page"},{"location":"examples/rho_3states/#Debugging-Continuation-of-Optimization","page":"Example 3 (Diss. Gate)","title":"Debugging Continuation of Optimization","text":"","category":"section"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"using Serialization\ndumpdir = joinpath(@__DIR__, \"dump\"); mkpath(dumpdir)\nserialize(joinpath(dumpdir, \"./opt_result.jls\"), opt_result)\nopt_result_prev = deserialize(joinpath(dumpdir, \"./opt_result.jls\"))\nproblem.kwargs[:iter_stop] = 5\nproblem.kwargs[:continue_from] = opt_result_prev","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"opt_result2 = optimize_pulses(problem);\nnothing #hide","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"opt_result2","category":"page"},{"location":"examples/rho_3states/#Optimization-result","page":"Example 3 (Diss. Gate)","title":"Optimization result","text":"","category":"section"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"TODO","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"","category":"page"},{"location":"examples/rho_3states/","page":"Example 3 (Diss. Gate)","title":"Example 3 (Diss. Gate)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"EditURL = \"https://github.com/QuantumControl-jl/Krotov.jl/blob/master/examples/state_to_state_parametrizations.jl\"","category":"page"},{"location":"examples/state_to_state_parametrizations/#Example-4:-Pulse-Parametrization","page":"Example 4 (Parametrization)","title":"Example 4: Pulse Parametrization","text":"","category":"section"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"tip: Tip\nThis example is also available as a Jupyter notebook: simple_state_to_state.ipynb.","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"gdefop1hat1 gdefinittextinit gdeftgttexttgt","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"This example illustrates the parametrization of control pulses as a form of amplitude constraint.","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"using QuantumPropagators\nusing QuantumControlBase\nusing Krotov\nusing LinearAlgebra\n\n\nusing PyPlot\nmatplotlib.use(\"Agg\")","category":"page"},{"location":"examples/state_to_state_parametrizations/#Parametrizations","page":"Example 4 (Parametrization)","title":"Parametrizations","text":"","category":"section"},{"location":"examples/state_to_state_parametrizations/#Symmetric-Bounded-Controls","page":"Example 4 (Parametrization)","title":"Symmetric Bounded Controls","text":"","category":"section"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"function plot_symmetric_parametrization_comparison()\n    fig, axs = matplotlib.pyplot.subplots(figsize=(16, 3), ncols=3)\n\n    u_vals = collect(range(-3, 3, length=101))\n    ϵ_vals = collect(range(-1, 1, length=101))\n\n    ϵ_min = -1.0\n    ϵ_max = 1.0\n\n    axs[1].plot(u_vals, u_vals, \"--\", color=\"black\")\n    axs[1].plot(u_vals, TanhParametrization(ϵ_min, ϵ_max).epsilon_of_u.(u_vals), label=\"Tanh\")\n    axs[1].plot(u_vals, LogisticParametrization(ϵ_min, ϵ_max).epsilon_of_u.(u_vals), label=\"Logistic(k=1)\")\n    axs[1].plot(u_vals, LogisticParametrization(ϵ_min, ϵ_max, k=4).epsilon_of_u.(u_vals), label=\"Logistic(k=4)\")\n    axs[1].set_ylim(-1.2, 1.2)\n    axs[1].set_xlabel(\"u\")\n    axs[1].set_ylabel(\"ϵ\")\n\n    axs[2].plot(ϵ_vals, ϵ_vals, \"--\", color=\"black\")\n    axs[2].plot(ϵ_vals, TanhParametrization(ϵ_min, ϵ_max).u_of_epsilon.(ϵ_vals), label=\"Tanh\")\n    axs[2].plot(ϵ_vals, LogisticParametrization(ϵ_min, ϵ_max).u_of_epsilon.(ϵ_vals), label=\"Logistic(k=1)\")\n    axs[2].plot(ϵ_vals, LogisticParametrization(ϵ_min, ϵ_max, k=4).u_of_epsilon.(ϵ_vals), label=\"Logistic(k=4)\")\n    axs[2].set_ylim(-3, 3)\n    axs[2].set_ylabel(\"u\")\n    axs[2].set_xlabel(\"ϵ\")\n    axs[2].legend()\n\n    axs[3].plot(u_vals, [1.0 for _ in u_vals], \"--\", color=\"black\")\n    axs[3].plot(u_vals, TanhParametrization(ϵ_min, ϵ_max).de_du_derivative.(u_vals), label=\"Tanh\")\n    axs[3].plot(u_vals, LogisticParametrization(ϵ_min, ϵ_max).de_du_derivative.(u_vals), label=\"Logistic(k=1)\")\n    axs[3].plot(u_vals, LogisticParametrization(ϵ_min, ϵ_max, k=4).de_du_derivative.(u_vals), label=\"Logistic(k=4)\")\n    axs[3].set_ylim(0, 2)\n    axs[3].set_xlabel(\"u\")\n    axs[3].set_ylabel(\"∂ϵ/∂u\")\n\n    return fig\nend\n\nplot_symmetric_parametrization_comparison()","category":"page"},{"location":"examples/state_to_state_parametrizations/#Positive-(Bounded)-Controls","page":"Example 4 (Parametrization)","title":"Positive (Bounded) Controls","text":"","category":"section"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"function plot_positive_parametrization_comparison()\n    fig, axs = matplotlib.pyplot.subplots(figsize=(16, 3), ncols=3)\n\n    u_vals = collect(range(-3, 3, length=101))\n    ϵ_vals = collect(range(0, 1, length=101))\n    ϵ_max = 1.0\n\n    axs[1].plot(u_vals, abs.(u_vals), \"--\", color=\"black\")\n    axs[1].plot(u_vals, TanhSqParametrization(ϵ_max).epsilon_of_u.(u_vals), label=\"TanhSq\")\n    axs[1].plot(u_vals, LogisticSqParametrization(ϵ_max).epsilon_of_u.(u_vals), label=\"LogisticSq(k=1)\")\n    axs[1].plot(u_vals, LogisticSqParametrization(ϵ_max, k=4.0).epsilon_of_u.(u_vals), label=\"LogisticSq(k=4)\")\n    axs[1].plot(u_vals, SquareParametrization().epsilon_of_u.(u_vals), label=\"Square\")\n    axs[1].set_ylim(0, 1.2)\n    axs[1].set_xlabel(\"u\")\n    axs[1].set_ylabel(\"ϵ\")\n\n    axs[2].plot(ϵ_vals, ϵ_vals, \"--\", color=\"black\")\n    axs[2].plot(ϵ_vals, TanhSqParametrization(ϵ_max).u_of_epsilon.(ϵ_vals), label=\"TanhSq\")\n    axs[2].plot(ϵ_vals, LogisticSqParametrization(ϵ_max).u_of_epsilon.(ϵ_vals), label=\"LogisticSq(k=1)\")\n    axs[2].plot(ϵ_vals, LogisticSqParametrization(ϵ_max, k=4.0).u_of_epsilon.(ϵ_vals), label=\"LogisticSq(k=4)\")\n    axs[2].plot(ϵ_vals, SquareParametrization().u_of_epsilon.(ϵ_vals), label=\"Square\")\n    axs[2].set_ylim(0, 3)\n    axs[2].set_ylabel(\"u\")\n    axs[2].set_xlabel(\"ϵ\")\n    axs[2].legend()\n\n    axs[3].plot(u_vals, sign.(u_vals), \"--\", color=\"black\")\n    axs[3].plot(u_vals, TanhSqParametrization(ϵ_max).de_du_derivative.(u_vals), label=\"TanhSq\")\n    axs[3].plot(u_vals, LogisticSqParametrization(ϵ_max).de_du_derivative.(u_vals), label=\"LogisticSq(k=1)\")\n    axs[3].plot(u_vals, LogisticSqParametrization(ϵ_max, k=4.0).de_du_derivative.(u_vals), label=\"LogisticSq(k=4)\")\n    axs[3].plot(u_vals, SquareParametrization().de_du_derivative.(u_vals), label=\"Square\")\n    axs[3].set_ylim(-2, 2)\n    axs[3].set_xlabel(\"u\")\n    axs[3].set_ylabel(\"∂ϵ/∂u\")\n\n    return fig\nend\n\nplot_positive_parametrization_comparison()","category":"page"},{"location":"examples/state_to_state_parametrizations/#Two-level-Hamiltonian","page":"Example 4 (Parametrization)","title":"Two-level Hamiltonian","text":"","category":"section"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"We consider the Hamiltonian opH_0 = - fracomega2 opsigma_z, representing a simple qubit with energy level splitting omega in the basis ket0ket1. The control field epsilon(t) is assumed to couple via the Hamiltonian opH_1(t) = epsilon(t) opsigma_x to the qubit, i.e., the control field effectively drives transitions between both qubit states.","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"We we will use","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"ϵ(t) = 0.2 * flattop(t, T=5, t_rise=0.3, func=:blackman);\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"\"\"\"Two-level-system Hamiltonian.\"\"\"\nfunction hamiltonian(Ω=1.0, ϵ=ϵ)\n    σ̂_z = ComplexF64[1 0; 0 -1];\n    σ̂_x = ComplexF64[0 1; 1  0];\n    Ĥ₀ = -0.5 * Ω * σ̂_z\n    Ĥ₁ = σ̂_x\n    return (Ĥ₀, (Ĥ₁, ϵ))\nend\n;\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"H = hamiltonian();\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"The control field here switches on from zero at t=0 to it's maximum amplitude 0.2 within the time period 0.3 (the switch-on shape is half a Blackman pulse). It switches off again in the time period 0.3 before the final time T=5). We use a time grid with 500 time steps between 0 and T:","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"tlist = collect(range(0, 5, length=500));\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"function plot_control(pulse::Vector, tlist)\n    fig, ax = matplotlib.pyplot.subplots(figsize=(6, 3))\n    ax.plot(tlist, pulse)\n    ax.set_xlabel(\"time\")\n    ax.set_ylabel(\"amplitude\")\n    return fig\nend\n\nplot_control(ϵ::T, tlist) where T<:Function =\n    plot_control([ϵ(t) for t in tlist], tlist)\n\nplot_control(H[2][2], tlist)","category":"page"},{"location":"examples/state_to_state_parametrizations/#Optimization-target","page":"Example 4 (Parametrization)","title":"Optimization target","text":"","category":"section"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"The krotov package requires the goal of the optimization to be described by a list of Objective instances. In this example, there is only a single objective: the state-to-state transfer from initial state ketPsi_init = ket0 to the target state ketPsi_tgt = ket1, under the dynamics of the Hamiltonian opH(t):","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"function ket(label)\n    result = Dict(\n        \"0\" => Vector{ComplexF64}([1, 0]),\n        \"1\" => Vector{ComplexF64}([0, 1]),\n    )\n    return result[string(label)]\nend\n;\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"objectives = [\n    Objective(initial_state=ket(0), generator=H, target_state=ket(1))\n]","category":"page"},{"location":"examples/state_to_state_parametrizations/#Square-parametrization-for-positive-pulses","page":"Example 4 (Parametrization)","title":"Square-parametrization for positive pulses","text":"","category":"section"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"problem = ControlProblem(\n    objectives=objectives,\n    pulse_options=IdDict(\n        ϵ  => Dict(\n            :lambda_a => 5,\n            :update_shape => t -> flattop(t, T=5, t_rise=0.3, func=:blackman),\n            :parametrization => SquareParametrization(),\n        )\n    ),\n    tlist=tlist,\n    iter_stop=50,\n    chi=chi_ss!,\n    J_T=J_T_ss,\n    check_convergence= res -> begin (\n            (res.J_T < 1e-3)\n            && (res.converged = true)\n            && (res.message=\"J_T < 10⁻³\")\n        ) end\n);\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"opt_result_positive = optimize_pulses(problem);\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"opt_result_positive","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"We can plot the optimized field:","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"plot_control(opt_result_positive.optimized_controls[1], tlist)","category":"page"},{"location":"examples/state_to_state_parametrizations/#Tanh-Square-Parametrization-for-positive-amplitude-constrained-pulses","page":"Example 4 (Parametrization)","title":"Tanh-Square-Parametrization for positive amplitude-constrained pulses","text":"","category":"section"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"problem_tanhsq = ControlProblem(\n    objectives=objectives,\n    pulse_options=IdDict(\n        ϵ  => Dict(\n            :lambda_a => 10,\n            :update_shape => t -> flattop(t, T=5, t_rise=0.3, func=:blackman),\n            :parametrization => TanhSqParametrization(3),\n        )\n    ),\n    tlist=tlist,\n    iter_stop=50,\n    chi=chi_ss!,\n    J_T=J_T_ss,\n    check_convergence= res -> begin (\n            (res.J_T < 1e-3)\n            && (res.converged = true)\n            && (res.message=\"J_T < 10⁻³\")\n        ) end\n);\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"opt_result_tanhsq = optimize_pulses(problem_tanhsq);\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"opt_result_tanhsq","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"We can plot the optimized field:","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"plot_control(opt_result_tanhsq.optimized_controls[1], tlist)","category":"page"},{"location":"examples/state_to_state_parametrizations/#Logistic-Square-Parametrization-for-positive-amplitude-constrained-pulses","page":"Example 4 (Parametrization)","title":"Logistic-Square-Parametrization for positive amplitude-constrained pulses","text":"","category":"section"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"problem_logisticsq = ControlProblem(\n    objectives=objectives,\n    pulse_options=IdDict(\n        ϵ  => Dict(\n            :lambda_a => 1,\n            :update_shape => t -> flattop(t, T=5, t_rise=0.3, func=:blackman),\n            :parametrization => LogisticSqParametrization(3, k=1.0),\n        )\n    ),\n    tlist=tlist,\n    iter_stop=50,\n    chi=chi_ss!,\n    J_T=J_T_ss,\n    check_convergence= res -> begin (\n            (res.J_T < 1e-3)\n            && (res.converged = true)\n            && (res.message=\"J_T < 10⁻³\")\n        ) end\n);\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"opt_result_logisticsq = optimize_pulses(problem_logisticsq);\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"We can plot the optimized field:","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"plot_control(opt_result_logisticsq.optimized_controls[1], tlist)","category":"page"},{"location":"examples/state_to_state_parametrizations/#Tanh-parametrization-for-amplitude-constrained-pulses","page":"Example 4 (Parametrization)","title":"Tanh-parametrization for amplitude-constrained pulses","text":"","category":"section"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"problem_tanh = ControlProblem(\n    objectives=objectives,\n    pulse_options=IdDict(\n        ϵ  => Dict(\n            :lambda_a => 1,\n            :update_shape => t -> flattop(t, T=5, t_rise=0.3, func=:blackman),\n            :parametrization => TanhParametrization(-0.5, 0.5),\n        )\n    ),\n    tlist=tlist,\n    iter_stop=50,\n    chi=chi_ss!,\n    J_T=J_T_ss,\n    check_convergence= res -> begin (\n            (res.J_T < 1e-3)\n            && (res.converged = true)\n            && (res.message=\"J_T < 10⁻³\")\n        ) end\n);\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"opt_result_tanh = optimize_pulses(problem_tanh);\nnothing #hide","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"plot_control(opt_result_tanh.optimized_controls[1], tlist)","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"","category":"page"},{"location":"examples/state_to_state_parametrizations/","page":"Example 4 (Parametrization)","title":"Example 4 (Parametrization)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Krotov]","category":"page"},{"location":"api/#Krotov.KrotovResult","page":"API","title":"Krotov.KrotovResult","text":"Result object returned by optimize_pulses.\n\n\n\n\n\n","category":"type"},{"location":"api/#Krotov.PulseParametrization","page":"API","title":"Krotov.PulseParametrization","text":"Specification for a \"time-local\" pulse parametrization.\n\nThe parametrization is given as a collection of three functions:\n\nϵ(u(t))\nu(ϵ(t))\nϵu as a function of u(t).\n\n\n\n\n\n","category":"type"},{"location":"api/#Krotov.LogisticParametrization-Tuple{Any, Any}","page":"API","title":"Krotov.LogisticParametrization","text":"Parametrization with a Logistic function that enforces ϵmin < ϵ(t) < ϵmax.\n\n\n\n\n\n","category":"method"},{"location":"api/#Krotov.LogisticSqParametrization-Tuple{Any}","page":"API","title":"Krotov.LogisticSqParametrization","text":"Parametrization with a Logistic-Square function that enforces 0 ≤ ϵ(t) < ϵ_max.\n\n\n\n\n\n","category":"method"},{"location":"api/#Krotov.NoParametrization-Tuple{}","page":"API","title":"Krotov.NoParametrization","text":"Parametrization where ϵ(t)  u(t).\n\n\n\n\n\n","category":"method"},{"location":"api/#Krotov.SquareParametrization-Tuple{}","page":"API","title":"Krotov.SquareParametrization","text":"Parametrization ϵ(t) = u²(t), enforcing pulse values ≥ 0.\n\n\n\n\n\n","category":"method"},{"location":"api/#Krotov.TanhParametrization-Tuple{Any, Any}","page":"API","title":"Krotov.TanhParametrization","text":"Parametrization with a tanh function that enforces ϵmin < ϵ(t) < ϵmax.\n\n\n\n\n\n","category":"method"},{"location":"api/#Krotov.TanhSqParametrization-Tuple{Any}","page":"API","title":"Krotov.TanhSqParametrization","text":"Parametrization with a tanh² function that enforces 0  ϵ(t)  ϵ_max.\n\n\n\n\n\n","category":"method"},{"location":"api/#Krotov.optimize_pulses-Tuple{Any}","page":"API","title":"Krotov.optimize_pulses","text":"Use Krotov's method to optimize the given optimization problem.\n\nresult = optimize_pulses(problem)\n\noptimizes the given control problem, see QuantumControlBase.ControlProblem.\n\nParameters are taken from the keyword arguments used in the instantiation of problem.\n\nRequired problem keyword arguments\n\nThe optimization functional is given implicitly via the mandatory problem keyword argument chi.\n\nOptional problem keyword arguments\n\nThe following problem keyword arguments are supported (with default values):\n\nsigma=nothing: Function that calculate the second-order contribution. If  not given, the first-order Krotov method is used.\niter_start=0: the initial iteration number\niter_stop=5000: the maximum iteration number\nprop_method=:auto: The propagation method to use\nupdate_hook: A function that receives the Krotov workspace, the iteration  number, the list of updated pulses and the list of guess pulses as  positional arguments. The function may mutate any of its arguments. This may  be used e.g. to apply a spectral filter to the updated pulses, or to update  propagation workspaces inside the Krotov workspace.\ninfo_hook: A function that receives the same argumens as update_hook, in  order to write information about the current iteration to the screen or to a  file. The default info_hook prints a table with convergence information to  the screen. Runs after update_hook. The info_hook function may return a  tuple, which is stored in the list of records inside the  KrotovResult object.\ncheck_convergence: a function to check whether convergence has been reached. Receives a KrotovResult object result, and should set result.converged to true and result.message to an appropriate string in case of convergence. Multiple convergence checks can be performed by chaining functions with ∘. The convergence check is performed after any calls to update_hook and info_hook.\n\n\n\n\n\n","category":"method"},{"location":"api/#Krotov.print_table-Tuple{Any, Any, Vararg{Any, N} where N}","page":"API","title":"Krotov.print_table","text":"Default info_hook\n\n\n\n\n\n","category":"method"},{"location":"examples/state_to_state_rwa/","page":"Example 2 (RWA)","title":"Example 2 (RWA)","text":"EditURL = \"https://github.com/QuantumControl-jl/Krotov.jl/blob/master/examples/state_to_state_rwa.jl\"","category":"page"},{"location":"examples/state_to_state_rwa/#Example-2:-Optimization-of-a-State-to-State-Transfer-in-a-Lambda-System-in-the-RWA","page":"Example 2 (RWA)","title":"Example 2: Optimization of a State-to-State Transfer in a Lambda System in the RWA","text":"","category":"section"},{"location":"examples/state_to_state_rwa/","page":"Example 2 (RWA)","title":"Example 2 (RWA)","text":"tip: Tip\nThis example is also available as a Jupyter notebook: state_to_state_rwa.ipynb","category":"page"},{"location":"examples/state_to_state_rwa/","page":"Example 2 (RWA)","title":"Example 2 (RWA)","text":"This example is illustrates the use of complex-valued control fields. This is accomplished by rewriting the Hamiltonian as the sum of two independent controls (real and imaginary parts). We consider a 3-level system in a Lambda configuration.","category":"page"},{"location":"examples/state_to_state_rwa/","page":"Example 2 (RWA)","title":"Example 2 (RWA)","text":"const σ̂_z = ComplexF64[1 0; 0 -1]\nconst σ̂_x = ComplexF64[0 1; 1  0]\n\n\n\"\"\"Two-level-system Hamiltonian.\"\"\"\nfunction hamiltonian(Ω=1.0, E0=0.2)\n\n    Ĥ₀ = -0.5 * Ω * σ̂_z\n    Ĥ₁ = σ̂_x\n\n    return [Ĥ₀, Ĥ₁]\n\nend","category":"page"},{"location":"examples/state_to_state_rwa/","page":"Example 2 (RWA)","title":"Example 2 (RWA)","text":"","category":"page"},{"location":"examples/state_to_state_rwa/","page":"Example 2 (RWA)","title":"Example 2 (RWA)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"examples/#Examples","page":"List of Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"List of Examples","title":"List of Examples","text":"Pages = [\n    \"simple_state_to_state.md\",\n    \"state_to_state_rwa.md\",\n    \"rho_3states.md\",\n    \"state_to_state_parametrizations.md\",\n]\nDepth = 1","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"EditURL = \"https://github.com/QuantumControl-jl/Krotov.jl/blob/master/examples/simple_state_to_state.jl\"","category":"page"},{"location":"examples/simple_state_to_state/#Example-1:-Optimization-of-a-State-to-State-Transfer-in-a-Two-Level-System","page":"Example 1 (TLS)","title":"Example 1: Optimization of a State-to-State Transfer in a Two-Level-System","text":"","category":"section"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"tip: Tip\nThis example is also available as a Jupyter notebook: simple_state_to_state.ipynb.Compare this example against the same example using the krotov Python package.","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"gdefop1hat1 gdefinittextinit gdeftgttexttgt","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"This first example illustrates the basic use of the Krotov.jl by solving a simple canonical optimization problem: the transfer of population in a two level system.","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"using QuantumPropagators\nusing QuantumControlBase\nusing Krotov\nusing LinearAlgebra","category":"page"},{"location":"examples/simple_state_to_state/#Two-level-Hamiltonian","page":"Example 1 (TLS)","title":"Two-level Hamiltonian","text":"","category":"section"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"We consider the Hamiltonian opH_0 = - fracomega2 opsigma_z, representing a simple qubit with energy level splitting omega in the basis ket0ket1. The control field epsilon(t) is assumed to couple via the Hamiltonian opH_1(t) = epsilon(t) opsigma_x to the qubit, i.e., the control field effectively drives transitions between both qubit states.","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"We we will use","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"ϵ(t) = 0.2 * flattop(t, T=5, t_rise=0.3, func=:blackman);\nnothing #hide","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"\"\"\"Two-level-system Hamiltonian.\"\"\"\nfunction hamiltonian(Ω=1.0, ϵ=ϵ)\n    σ̂_z = ComplexF64[1 0; 0 -1];\n    σ̂_x = ComplexF64[0 1; 1  0];\n    Ĥ₀ = -0.5 * Ω * σ̂_z\n    Ĥ₁ = σ̂_x\n    return (Ĥ₀, (Ĥ₁, ϵ))\nend\n;\nnothing #hide","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"H = hamiltonian();\nnothing #hide","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"The control field here switches on from zero at t=0 to it's maximum amplitude 0.2 within the time period 0.3 (the switch-on shape is half a Blackman pulse). It switches off again in the time period 0.3 before the final time T=5). We use a time grid with 500 time steps between 0 and T:","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"tlist = collect(range(0, 5, length=500));\nnothing #hide","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"using PyPlot\nmatplotlib.use(\"Agg\")\n\nfunction plot_control(pulse::Vector, tlist)\n    fig, ax = matplotlib.pyplot.subplots(figsize=(6, 3))\n    ax.plot(tlist, pulse)\n    ax.set_xlabel(\"time\")\n    ax.set_ylabel(\"amplitude\")\n    return fig\nend\n\nplot_control(ϵ::T, tlist) where T<:Function =\n    plot_control([ϵ(t) for t in tlist], tlist)\n\nplot_control(H[2][2], tlist)","category":"page"},{"location":"examples/simple_state_to_state/#Optimization-target","page":"Example 1 (TLS)","title":"Optimization target","text":"","category":"section"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"The krotov package requires the goal of the optimization to be described by a list of Objective instances. In this example, there is only a single objective: the state-to-state transfer from initial state ketPsi_init = ket0 to the target state ketPsi_tgt = ket1, under the dynamics of the Hamiltonian opH(t):","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"function ket(label)\n    result = Dict(\n        \"0\" => Vector{ComplexF64}([1, 0]),\n        \"1\" => Vector{ComplexF64}([0, 1]),\n    )\n    return result[string(label)]\nend\n;\nnothing #hide","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"objectives = [\n    Objective(initial_state=ket(0), generator=H, target_state=ket(1))\n]","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"problem = ControlProblem(\n    objectives=objectives,\n    pulse_options=IdDict(\n        ϵ  => Dict(\n            :lambda_a => 5,\n            :update_shape => t -> flattop(t, T=5, t_rise=0.3, func=:blackman),\n        )\n    ),\n    tlist=tlist,\n    iter_stop=50,\n    chi=chi_ss!,\n    J_T=J_T_ss,\n    check_convergence= res -> begin (\n            (res.J_T < 1e-3)\n            && (res.converged = true)\n            && (res.message=\"J_T < 10⁻³\")\n        ) end\n);\nnothing #hide","category":"page"},{"location":"examples/simple_state_to_state/#Simulate-dynamics-under-the-guess-field","page":"Example 1 (TLS)","title":"Simulate dynamics under the guess field","text":"","category":"section"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"Before running the optimization procedure, we first simulate the dynamics under the guess field epsilon_0(t). The following solves equation of motion for the defined objective, which contains the initial state ketPsi_init and the Hamiltonian opH(t) defining its evolution.","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"guess_dynamics = propagate(\n        objectives[1], problem.tlist;\n        storage=true, observables=(Ψ->abs.(Ψ).^2, )\n)","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"function plot_population(pop0::Vector, pop1::Vector, tlist)\n    fig, ax = matplotlib.pyplot.subplots(figsize=(6, 3))\n    ax.plot(tlist, pop0, label=\"0\")\n    ax.plot(tlist, pop1, label=\"1\")\n    ax.legend()\n    ax.set_xlabel(\"time\")\n    ax.set_ylabel(\"population\")\n    return fig\nend\n\nplot_population(guess_dynamics[1,:], guess_dynamics[2,:], tlist)","category":"page"},{"location":"examples/simple_state_to_state/#Optimize","page":"Example 1 (TLS)","title":"Optimize","text":"","category":"section"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"In the following we optimize the guess field epsilon_0(t) such that the intended state-to-state transfer ketPsi_init rightarrow ketPsi_tgt is solved, via the krotov package's central optimize_pulses routine.  It requires, besides the previously defined objectives, information about the optimization functional J_T (implicitly, via chi_constructor, which calculates the states ketchi = fracJ_TbraPsi).","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"opt_result = optimize_pulses(problem);\nnothing #hide","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"opt_result","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"We can plot the optimized field:","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"plot_control(opt_result.optimized_controls[1], tlist)","category":"page"},{"location":"examples/simple_state_to_state/#Simulate-the-dynamics-under-the-optimized-field","page":"Example 1 (TLS)","title":"Simulate the dynamics under the optimized field","text":"","category":"section"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"Having obtained the optimized control field, we can simulate the dynamics to verify that the optimized field indeed drives the initial state ketPsi_init = ket0 to the desired target state ketPsi_tgt = ket1.","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"opt_dynamics = propagate(\n        objectives[1], problem.tlist;\n        controls_map=IdDict(ϵ  => opt_result.optimized_controls[1]),\n        storage=true, observables=(Ψ->abs.(Ψ).^2, )\n)","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"plot_population(opt_dynamics[1,:], opt_dynamics[2,:], tlist)","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"","category":"page"},{"location":"examples/simple_state_to_state/","page":"Example 1 (TLS)","title":"Example 1 (TLS)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Krotov","category":"page"},{"location":"#Krotov.jl","page":"Home","title":"Krotov.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia implementation of Krotov's method for quantum optimal control","category":"page"},{"location":"","page":"Home","title":"Home","text":"Krotov.jl is a port of the krotov Python package","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"overview.md\",\n]\nDepth = 1","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"examples/simple_state_to_state.md\",\n    \"examples/state_to_state_rwa.md\",\n    \"examples/rho_3states.md\",\n    \"examples/state_to_state_parametrizations.md\",\n]\nDepth = 1","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"api.md\",\n]\nDepth = 1","category":"page"}]
}
